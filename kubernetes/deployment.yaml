apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-service
  labels:
    app: org-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: org-service
  template:
    metadata:
      labels:
        app: org-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: org-service
        image: org-service:1.0.0
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ENV
          value: "production"
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: org-service-secrets
              key: google-client-id
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: org-service-secrets
              key: google-client-secret
        - name: GOOGLE_OAUTH_REDIRECT_URI
          value: "https://api.yourcompany.com/auth/callback"
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: org-service-secrets
              key: jwt-secret-key
        - name: JWT_ALGORITHM
          value: "HS256"
        - name: JWT_EXPIRY_SECONDS
          value: "604800"

        # Liveness probe - checks if container is alive
        # Kubernetes will restart the pod if this fails
        livenessProbe:
          httpGet:
            path: /live
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        # Readiness probe - checks if container can accept traffic
        # Kubernetes will not send traffic if this fails
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 2

        # Startup probe - gives container time to start
        # Disables liveness/readiness checks until this passes
        startupProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30  # 30 * 5s = 150s max startup time

        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: org-service
  labels:
    app: org-service
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: org-service

---
# Optional: Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: org-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: org-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
